{
  "name": "bgold-cosmos.GitHub.io",
  "tagline": "live-coding physics/audio",
  "body": "## Upcoming Event!\r\nI'll be playing April 15 at The Depot in Hopkins, MN, along with Kindohm and Blaerg, with visual artistry provided by ObiWanCodenobi\r\n![MN Algorave](images/algoposter.jpg)\r\n\r\n## Tidal notes\r\nI use and occasionally contribute to Tidal (@tidalcycles).  I also use the Atom plugin to run things.\r\n\r\n## Customizing Tidal\r\nThere are several options! Here I go from simpler to more advanced\r\n### keeping snippets\r\nI have a separate `snippets.tidal` file where I keep a bunch of macros that I find useful.  If you come up with something really great, consider sharing it!  Here's what mine currently looks like:\r\n```\r\nlet (***) = foldl (|*|)\r\n    (+++) = foldl (|+|)\r\n    (###) = foldl (#)\r\n    outside n f p = slow n $ f (density n p)\r\n    every' n o f = when ((== o) . (`mod` n)) f\r\n    withArc (s,e) f p = stack [sliceArc (0,s) p, f $ sliceArc (s,e) p, sliceArc (e,1) p]\r\n    shiftArc (s,e) t = withArc (s,e) (t ~>)\r\n    beginend bpat durpat = (begin bpat) # (end $ (+) <$> bpat <*> durpat)\r\n    flange n t p = stack [ (toRational i*t) ~> p # begin (pure $ i/n) # end (pure $ (i+1)/n) | i <- [0..n-1] ]\r\n    sometimesBy' x f p = (1024 ~>) $ sometimesBy x f p\r\n    pingpongBy x t f p = stack [p, t ~> (f p # pan (pure $ (1-x)/2)), (3*t) ~> (f $ f p # pan (pure $ (x+1)/2))]\r\n    pingpong = pingpongBy 1\r\n    pingpongBy' x fb tL tR cps f p = stack [ p,\r\n                                 (tL ~> (f p)) # pan (pure $ (1-x)/2) |*| ddd,\r\n                                 ((tL+tR) ~> (f p)) # pan (pure $ (x+1)/2) |*| ddd ]\r\n              where ddd = delay \"1\" |*| delaytime (pure $ fromRational $ (tL+tR)/cps) |*| delayfeedback (pure fb) |*| gain (pure fb)\r\n    pop op x y = op <$> x <*> y\r\n    padd = pop (+)\r\n```\r\nI just evaluate this whole thing and get all those functions for the remainder of my Tidal session.\r\n\r\n### My TidalCustom.hs  \r\nFor more sophisticated customizations that might need to pull from another library, you can try moving your definitions to a separate file that will be loaded at Tidal startup (either in Emacs or Atom).  Notice there's some overlap with some of the stuff I defined above.\r\n\r\nFirst a bunch of options and imports (not all of these are necessary at the moment)\r\n```\r\n{-# OPTIONS_GHC -XNoMonomorphismRestriction #-}\r\n\r\nmodule TidalCustom where\r\n\r\nimport Control.Applicative\r\nimport Data.Monoid\r\nimport Data.Fixed\r\nimport Data.List\r\nimport Data.Maybe\r\nimport Data.Ratio\r\nimport Debug.Trace\r\nimport Data.Typeable\r\nimport Data.Function\r\nimport Data.String\r\nimport Music.Theory.Bjorklund\r\nimport Sound.Tidal.Dirt\r\nimport Sound.Tidal.Pattern\r\nimport Sound.Tidal.Stream\r\nimport Sound.Tidal.Strategies\r\nimport Sound.Tidal.Tempo\r\nimport Sound.Tidal.Time\r\nimport Sound.Tidal.Utils\r\nimport Data.Time (getCurrentTime, UTCTime, diffUTCTime)\r\nimport Data.Time.Clock.POSIX\r\nimport Control.Concurrent.MVar\r\nimport Control.Monad.Trans (liftIO)\r\n```\r\n\r\nThen I define some custom functions I use a lot\r\n```\r\noutside n f p = slow n $ f (density n p) \r\n\r\nevery' n o f = when ((== o) . (`mod` n)) f \r\n\r\nslowspread' n f xs = slowspread f (concat $ map (replicate n) xs)\r\n\r\nmetallo :: Time -> [Int] -> [Double] -> (OscPattern -> OscPattern)\r\nmetallo i xs ys = slowspread (\\x -> inside i (striate' (fst x) (snd x))) (zip xs ys) \r\n\r\nchoppedsaw1 :: Time -> Pattern Double\r\nchoppedsaw1 n = sig $ \\t -> \r\n  let t1  = mod' (fromRational t) 1\r\n      sqr = (2 * floor (t1 * n)) - (floor (2*t1*n)) + 1\r\n  in  (t1 - 1) * (fromIntegral sqr) + 1\r\n\r\nwithArc' :: Arc -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a\r\nwithArc' (s,e) f p = stack [sliceArc (0,s) p,\r\n                            f $ sliceArc (s,e) p,\r\n                            sliceArc (e,1) p\r\n                           ]\r\n\r\nshiftArc (s,e) t = withArc' (s,e) (t ~>)\r\n```\r\n### Modifying Tidal\r\nIt's really not too hard to develop Tidal itself.  Create a fork and clone it to your computer.  You can edit your startup script (`BootTidal.hs` in Atom) to load this installation instead of the one Cabal installed (see next section).  Now you can edit Tidal's source files directly, reboot Tidal, and see the effects of what you did!  It's probably polite to make a new branch for changes you make, then you can sync it and submit a pull request to have your changes brought back into the main version of Tidal.\r\n\r\n## Customizing Atom -- BootTidal.hs\r\nI use an edited version of this file to set up easy interfaces to SuperCollider and [this visualizer](https://github.com/fortmeier/weltfrieden)\r\n\r\nFirst, I tell it to use a development version of Tidal (dev-0.7 at the moment) from GitHub rather than the Tidal version installed by Cabal\r\n```\r\n:cd ~/Documents/GitHub/Tidal2\r\n:set prompt \"\"\r\n:load Sound.Tidal.Context\r\n```\r\n\r\nThen there's the standard stuff to set up `(d1,t1)` through `(d9,t9)`, after which I add the following to connect to SuperCollider (I'm assuming `0.7` branch of SuperDirt here)\r\n```\r\n(sd1, td1) <- superDirtSetters getNow\r\n```\r\nIf you want `hush` to work with everything you need to add to its definition\r\n```\r\nlet hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9,sd1]\r\n```\r\n\r\nFinally, to interface with the visualizer I insert\r\n```\r\nlet splashState = Sound.Tidal.Context.state \"127.0.0.1\" 7772 dirt\r\nlet splashSetters getNow = do ss <- splashState ; return (setter ss, transition getNow ss)\r\n(gl1,glt1) <- splashSetters getNow\r\n(gl2,glt2) <- splashSetters getNow\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}