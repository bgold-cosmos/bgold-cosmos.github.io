{"name":"bgold-cosmos.GitHub.io","tagline":"live-coding physics/audio","body":"### Tidal notes\r\nI use and occasionally contribute to Tidal (@tidalcycles).  I also use the Atom plugin to run things.\r\n\r\n### My TidalCustom.hs\r\nThis can be included in the startup script I use in Emacs or Atom (more often the latter these days).\r\n\r\nFirst a bunch of options and imports (not all of these are necessary at the moment)\r\n```\r\n{-# OPTIONS_GHC -XNoMonomorphismRestriction #-}\r\n\r\nmodule TidalCustom where\r\n\r\nimport Control.Applicative\r\nimport Data.Monoid\r\nimport Data.Fixed\r\nimport Data.List\r\nimport Data.Maybe\r\nimport Data.Ratio\r\nimport Debug.Trace\r\nimport Data.Typeable\r\nimport Data.Function\r\nimport Data.String\r\nimport Music.Theory.Bjorklund\r\nimport Sound.Tidal.Dirt\r\nimport Sound.Tidal.Pattern\r\nimport Sound.Tidal.Stream\r\nimport Sound.Tidal.Strategies\r\nimport Sound.Tidal.Tempo\r\nimport Sound.Tidal.Time\r\nimport Sound.Tidal.Utils\r\nimport Data.Time (getCurrentTime, UTCTime, diffUTCTime)\r\nimport Data.Time.Clock.POSIX\r\nimport Control.Concurrent.MVar\r\nimport Control.Monad.Trans (liftIO)\r\n```\r\n\r\nThen I define some custom functions I use a lot\r\n```\r\noutside n f p = slow n $ f (density n p) \r\n\r\nevery' n o f = when ((== o) . (`mod` n)) f \r\n\r\nslowspread' n f xs = slowspread f (concat $ map (replicate n) xs)\r\n\r\nmetallo :: Time -> [Int] -> [Double] -> (OscPattern -> OscPattern)\r\nmetallo i xs ys = slowspread (\\x -> inside i (striate' (fst x) (snd x))) (zip xs ys) \r\n\r\nchoppedsaw1 :: Time -> Pattern Double\r\nchoppedsaw1 n = sig $ \\t -> \r\n  let t1  = mod' (fromRational t) 1\r\n      sqr = (2 * floor (t1 * n)) - (floor (2*t1*n)) + 1\r\n  in  (t1 - 1) * (fromIntegral sqr) + 1\r\n\r\nwithArc' :: Arc -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a\r\nwithArc' (s,e) f p = stack [sliceArc (0,s) p,\r\n                            f $ sliceArc (s,e) p,\r\n                            sliceArc (e,1) p\r\n                           ]\r\n\r\nshiftArc (s,e) t = withArc' (s,e) (t ~>)\r\n```\r\n\r\n### Customizing Atom -- BootTidal.hs\r\nI use an edited version of this file to set up easy interfaces to SuperCollider and [this visualizer](https://github.com/fortmeier/weltfrieden)\r\n\r\nFirst, I tell it to use a development version of Tidal (dev-0.6 at the moment) from GitHub rather than the Tidal version installed by Cabal\r\n```\r\n:cd ~/Documents/GitHub/Tidal2\r\n:set prompt \"\"\r\n:load Sound.Tidal.Context\r\n```\r\n\r\nThen there's the standard stuff to set up `(d1,t1)` through `(d9,t9)`, after which I add the following to connect to SuperCollider\r\n```\r\nsuperd1 <- stream \"127.0.0.1\" 57120 dirt {timestamp = BundleStamp}\r\nsuperd2 <- stream \"127.0.0.1\" 57120 dirt {timestamp = BundleStamp}\r\n\r\nlet sd1 p = superd1 $ p |+| nudge \"0.81\" |*| gain \"0.75\"\r\nlet sd2 p = superd2 $ p |+| nudge \"0.81\" |*| gain \"0.75\"\r\n```\r\n\r\nFinally, to interface with the visualizer I insert\r\n```\r\nlet splashState = Sound.Tidal.Context.state \"127.0.0.1\" 7772 dirt\r\nlet splashSetters getNow = do ss <- splashState ; return (setter ss, transition getNow ss)\r\n(gl1,glt1) <- splashSetters getNow\r\n(gl2,glt2) <- splashSetters getNow\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}